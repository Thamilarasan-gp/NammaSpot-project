import React, { useState, useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";
import { Link } from "react-router-dom";
import { useLocation } from 'react-router-dom';
import axios from 'axios';

const Map = () => {
  const [locations, setLocations] = useState([]);
  const [search, setSearch] = useState("");
  const [currentMarker, setCurrentMarker] = useState(null);
  const [mapWidth, setMapWidth] = useState('100%');
  const [marginLeft, setMarginLeft] = useState("0");
  const [markerInfo, setMarkerInfo] = useState({ name: "", desc: "", place: "" });
  const mapRef = useRef(null);
  const location = useLocation();

  useEffect(() => {
    axios.get('http://localhost:3001/get')
    .then(res =>console.log(res))
      //.then(result => setLocations(result.data))
      .catch(err => console.log(err));
  }, []);

  /*useEffect(() => {
    axios.get('http://localhost:3001/getdetails',{markerInfo.name})
      .then(result => console.log(result.data))
      .catch(err => console.log(err));
  }, []);*/

  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const query = searchParams.get('search');
    if (query) {
      setSearch(query);
      markLocation(query);
    }
  }, [location.search]);

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5); 
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    leafletMap.on('click', addMarker);

    markAllLocations();

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, [locations]);

  useEffect(() => {
    if (mapRef.current) {
      L.Control.geocoder().addTo(mapRef.current);
    }
  }, []);

  const markLocation = async (query) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${query}&format=json`);
      const data = await response.json();
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const marker = L.marker([lat, lon])
          .addTo(mapRef.current)
          .bindPopup(`<b>${query}</b>`)
          .on('click', () => handleMarkerClick({ name: query, lat, lon }))
          .openPopup();
        setCurrentMarker(marker);
      }
    } catch (error) {
      console.error('Error marking location:', error);
    }
  };

  const markAllLocations = async () => {
    for (const location of locations) {
      await markLocation(location);
    }
  };

  const addMarker = (e) => {
    if (currentMarker !== null) {
      mapRef.current.removeLayer(currentMarker);
    }

    const popupContent = `
      <form id="marker-form">
        <label for="marker-name">Name:</label><br>
        <input type="text" id="marker-name" name="marker-name"><br>
        <label for="marker-desc">Description:</label><br>
        <input type="text" id="marker-desc" name="marker-desc"><br><br>
        <input type="submit" value="Add Marker">
      </form>
    `;

    const marker = L.marker(e.latlng)
      .addTo(mapRef.current)
      .bindPopup(popupContent)
      .openPopup();

    setCurrentMarker(marker);
  };

  useEffect(() => {
    const handleFormSubmit = (event) => {
      event.preventDefault();
      const name = document.getElementById('marker-name').value;
      const desc = document.getElementById('marker-desc').value;

      const newContent = `
        <h3>${name}</h3>
        <p>${desc}</p>
        <button id="bookBtn">Book</button>
      `;
      currentMarker.setPopupContent(newContent);

      const bookBtn = document.getElementById('bookBtn');
      if (bookBtn) {
        bookBtn.addEventListener('click', () => book(name, desc));
      }
    };

    const form = document.getElementById('marker-form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    return () => {
      if (form) {
        form.removeEventListener('submit', handleFormSubmit);
      }
    };
  }, [currentMarker]);

  const handleMarkerClick = async ({ name, lat, lon }) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`);
      const data = await response.json();
      if (data && data.display_name) {
        setMarkerInfo({ name, desc: "", place: data.display_name });
      }
    } catch (error) {
      console.error('Error fetching place name:', error);
    }
    setMapWidth('50%');
    setMarginLeft("50%");
  };

  const book = async (name, desc) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${currentMarker.getLatLng().lat}&lon=${currentMarker.getLatLng().lng}&format=json`);
      const data = await response.json();
      if (data && data.display_name) {
        setMarkerInfo({ name, desc, place: data.display_name });
      }
    } catch (error) {
      console.error('Error fetching place name:', error);
    }
    setMapWidth('50%');
    setMarginLeft("50%");
  };

  return (
    <div>
      <div id="map" className="maps" style={{ marginLeft: marginLeft, width: mapWidth, height: '700px' }}></div>
      <div className="h">
        <div className="info">
          <h3 className='infoname'>{markerInfo.name}</h3>
          <p className='infoplace'>{markerInfo.place}</p>
          <p className='infodes'>{markerInfo.desc}</p>
        
          <h1 className='infoprice'>$78</h1>
          <button className='infobtn'><Link to="/ticketbook">BOOK NOW</Link></button>
        </div>
      </div>
    </div>
  );
};

export default Map;


//search withimport React, { useState, useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";
import { useNavigate } from "react-router-dom";
import axios from 'axios';

const Map = () => {
  const [locations, setLocations] = useState([]);
  const [currentMarker, setCurrentMarker] = useState(null);
  const [markerInfo, setMarkerInfo] = useState({});
  const [showBooking, setShowBooking] = useState(false);
  const [search, setSearch] = useState("");
  const mapRef = useRef(null);
  const navigate = useNavigate();

  const customIcon = L.icon({
    iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png', // Replace with the path to your custom icon
    iconSize: [32, 32], // Adjust the size as needed
    iconAnchor: [16, 32], // Anchor the icon at its center
    popupAnchor: [0, -32] // Adjust the popup anchor
  });

  useEffect(() => {
    axios.get('http://localhost:3001/get')
      .then(res => {
        setLocations(res.data); // Set the fetched locations to state
        markAllLocations(res.data); // Mark all locations on the map
      })
      .catch(err => console.log(err));
  }, []);

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    leafletMap.on('click', addMarker);

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, []);

  const markAllLocations = async (locations) => {
    for (const location of locations) {
      await markLocation(location);
    }
  };

  const markLocation = async (location) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
      const data = await response.json();
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const marker = L.marker([lat, lon], { icon: customIcon }) // Use the custom icon
          .addTo(mapRef.current)
          .bindPopup(`<b>${location.locations}</b>`)
          .on('click', () => handleMarkerClick(location))
          .openPopup();
        setCurrentMarker(marker);
      }
    } catch (error) {
      console.error('Error marking location:', error);
    }
  };

  const addMarker = (e) => {
    if (currentMarker !== null) {
      mapRef.current.removeLayer(currentMarker);
    }

    const popupContent = `
      <form id="marker-form">
        <label for="marker-name">Name:</label><br>
        <input type="text" id="marker-name" name="marker-name"><br>
        <label for="marker-desc">Description:</label><br>
        <input type="text" id="marker-desc" name="marker-desc"><br><br>
        <input type="submit" value="Add Marker">
      </form>
    `;

    const marker = L.marker(e.latlng, { icon: customIcon }) // Use the custom icon
      .addTo(mapRef.current)
      .bindPopup(popupContent)
      .openPopup();

    setCurrentMarker(marker);
  };

  useEffect(() => {
    const handleFormSubmit = async (event) => {
      event.preventDefault();
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(search)}&format=json`);
        const data = await response.json();
        if (data && data.length > 0) {
          const { lat, lon } = data[0];
          const marker = L.marker([lat, lon], { icon: customIcon })
            .addTo(mapRef.current)
            .bindPopup(search)
            .openPopup();
          mapRef.current.setView([lat, lon], 10);
          setCurrentMarker(marker);
        }
      } catch (error) {
        console.error('Error searching location:', error);
      }
    };

    const form = document.getElementById('search-form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    return () => {
      if (form) {
        form.removeEventListener('submit', handleFormSubmit);
      }
    };
  }, [search]);

  const handleMarkerClick = async (location) => {
    setMarkerInfo(location);
    setShowBooking(true);
  };

  return (
    <div className="map-container">
      <form id="search-form">
        <input 
          type="text" 
          value={search} 
          onChange={(e) => setSearch(e.target.value)} 
          placeholder="Search for a location" 
        />
        <button type="submit">Search</button>
      </form>
      {showBooking && (
        <div className="h">
          <div className="info">
            <p className='parkbooks'>BOOK FOR PARK</p>
            <p className='infoplace'>Place: {markerInfo.place}</p>
            <p className='infoname'>Company: {markerInfo.company}</p>
            <p className='infodes'>City: {markerInfo.city}</p>
            <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
            <p className='infoprice'>${markerInfo.price}</p>
            <div className='rates'>
              RATE: 3.5 out of 5
            </div>
            <button className='infobtn' >BOOK NOW</button>
            <div>
              <p className='infodes'>Description: {markerInfo.desc}</p>
              <p>How to Park</p>
              <p>Upon arrival, show parking pass to the attendant for validation</p>
            </div>
          </div>
        </div>
      )}
      <div id="map" className="map"></div>
    </div>
  );
};

export default Map;
///search with css
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import { useEffect, useRef, useState } from 'react';

const Map = () => {
  const [locations, setLocations] = useState([]);
  const [currentMarker, setCurrentMarker] = useState(null);
  const [markerInfo, setMarkerInfo] = useState({});
  const [showBooking, setShowBooking] = useState(false);
  const [search, setSearch] = useState("");
  const mapRef = useRef(null);
  const navigate = useNavigate();

  const customIcon = L.icon({
    iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png', // Replace with the path to your custom icon
    iconSize: [32, 32], // Adjust the size as needed
    iconAnchor: [16, 32], // Anchor the icon at its center
    popupAnchor: [0, -32] // Adjust the popup anchor
  });

  useEffect(() => {
    axios.get('http://localhost:3001/get')
      .then(res => {
        setLocations(res.data); // Set the fetched locations to state
        markAllLocations(res.data); // Mark all locations on the map
      })
      .catch(err => console.log(err));
  }, []);

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    leafletMap.on('click', addMarker);

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, []);

  const markAllLocations = async (locations) => {
    for (const location of locations) {
      await markLocation(location);
    }
  };

  const markLocation = async (location) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
      const data = await response.json();
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const marker = L.marker([lat, lon], { icon: customIcon }) // Use the custom icon
          .addTo(mapRef.current)
          .bindPopup(`<b>${location.locations}</b>`)
          .on('click', () => handleMarkerClick(location))
          .openPopup();
        setCurrentMarker(marker);
      }
    } catch (error) {
      console.error('Error marking location:', error);
    }
  };

  const addMarker = (e) => {
    if (currentMarker !== null) {
      mapRef.current.removeLayer(currentMarker);
    }

    const popupContent = `
      <form id="marker-form">
        <label for="marker-name">Name:</label><br>
        <input type="text" id="marker-name" name="marker-name"><br>
        <label for="marker-desc">Description:</label><br>
        <input type="text" id="marker-desc" name="marker-desc"><br><br>
        <input type="submit" value="Add Marker">
      </form>
    `;

    const marker = L.marker(e.latlng, { icon: customIcon }) // Use the custom icon
      .addTo(mapRef.current)
      .bindPopup(popupContent)
      .openPopup();

    setCurrentMarker(marker);
  };

  useEffect(() => {
    const handleFormSubmit = async (event) => {
      event.preventDefault();
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(search)}&format=json`);
        const data = await response.json();
        if (data && data.length > 0) {
          const { lat, lon } = data[0];
          const marker = L.marker([lat, lon], { icon: customIcon })
            .addTo(mapRef.current)
            .bindPopup(search)
            .openPopup();
          mapRef.current.setView([lat, lon], 10);
          setCurrentMarker(marker);
        }
      } catch (error) {
        console.error('Error searching location:', error);
      }
    };

    const form = document.getElementById('search-form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    return () => {
      if (form) {
        form.removeEventListener('submit', handleFormSubmit);
      }
    };
  }, [search]);

  const handleMarkerClick = async (location) => {
    setMarkerInfo(location);
    setShowBooking(true);
  };

  return (
    <div className="map-container">
      <div className="search-container">
        <form id="search-form">
          <input 
            type="text" 
            value={search} 
            onChange={(e) => setSearch(e.target.value)} 
            placeholder="Search for a location" 
          />
          <button style={{width:"100px"}} type="submit">search</button>
        </form>
      </div>
      {showBooking && (
        <div className="h">
          <div className="info">
            <p className='parkbooks'>BOOK FOR PARK</p>
            <p className='infoplace'>Place: {markerInfo.place}</p>
            <p className='infoname'>Company: {markerInfo.company}</p>
            <p className='infodes'>City: {markerInfo.city}</p>
            <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
            <p className='infoprice'>${markerInfo.price}</p>
            <div className='rates'>
              RATE: 3.5 out of 5
            </div>
            <button className='infobtn' >BOOK NOW</button>
            <div>
              <p className='infodes'>Description: {markerInfo.desc}</p>
              <p>How to Park</p>
              <p>Upon arrival, show parking pass to the attendant for validation</p>
            </div>
          </div>
        </div>
      )}
      <div id="map" className="map"></div>
    </div>
  );
};

export default Map;


//final  with search

import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import { useEffect, useRef, useState } from 'react';

const Map = () => {
  const [locations, setLocations] = useState([]);
  const [currentMarker, setCurrentMarker] = useState(null);
  const [markerInfo, setMarkerInfo] = useState({});
  const [showBooking, setShowBooking] = useState(false);
  const [search, setSearch] = useState("");
  const mapRef = useRef(null);
  const navigate = useNavigate();

  const customIcon = L.icon({
    iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png', // Replace with the path to your custom icon
    iconSize: [32, 32], // Adjust the size as needed
    iconAnchor: [16, 32], // Anchor the icon at its center
    popupAnchor: [0, -32] // Adjust the popup anchor
  });

  function handlenavigate() {
    navigate('/booking', { state: { city: markerInfo.city } });
  }

  useEffect(() => {
    axios.get('http://localhost:3001/get')
      .then(res => {
        setLocations(res.data); // Set the fetched locations to state
        markAllLocations(res.data); // Mark all locations on the map
      })
      .catch(err => console.log(err));
  }, []);

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, []);

  const markAllLocations = async (locations) => {
    for (const location of locations) {
      await markLocation(location);
    }
  };

  const markLocation = async (location) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
      const data = await response.json();
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const marker = L.marker([lat, lon], { icon: customIcon }) // Use the custom icon
          .addTo(mapRef.current)
          .bindPopup(`<b>${location.locations}</b>`)
          .on('click', () => handleMarkerClick(location))
          .openPopup();
        setCurrentMarker(marker);
      }
    } catch (error) {
      console.error('Error marking location:', error);
    }
  };

  useEffect(() => {
    const handleFormSubmit = async (event) => {
      event.preventDefault();
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(search)}&format=json`);
        const data = await response.json();
        if (data && data.length > 0) {
          const { lat, lon } = data[0];
          const marker = L.marker([lat, lon], { icon: customIcon })
            .addTo(mapRef.current)
            .bindPopup(search)
            .openPopup();
          mapRef.current.setView([lat, lon], 10);
          setCurrentMarker(marker);
        }
      } catch (error) {
        console.error('Error searching location:', error);
      }
    };

    const form = document.getElementById('search-form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    return () => {
      if (form) {
        form.removeEventListener('submit', handleFormSubmit);
      }
    };
  }, [search]);

  const handleMarkerClick = async (location) => {
    setMarkerInfo(location);
    setShowBooking(true);
  };

  return (
    <div className="map-container">
      <div className="search-container">
        <form id="search-form">
          <input 
            type="text" 
            value={search} 
            onChange={(e) => setSearch(e.target.value)} 
            placeholder="Search for a location" 
          />
          <button style={{width:"100px"}} type="submit">search</button>
        </form>
      </div>
      {showBooking && (
        <div className="h">
          <div className="info">
            <p className='parkbooks'>BOOK FOR PARK</p>
            <p className='infoplace'>Place: {markerInfo.place}</p>
            <p className='infoname'>Company: {markerInfo.company}</p>
            <p className='infodes'>City: {markerInfo.city}</p>
            <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
            <p className='infoprice'>${markerInfo.price}</p>
            <div className='rates'>
              RATE: 3.5 out of 5
            </div>
            <button className='infobtn' onClick={handlenavigate}>BOOK NOW</button>
            <div>
              <p className='infodes'>Description: {markerInfo.desc}</p>
              <p>How to Park</p>
              <p>Upon arrival, show parking pass to the attendant for validation</p>
            </div>
          </div>
        </div>
      )}
      <div id="map" className="map"></div>
    </div>
  );
};

export default Map;


//last corrected code 
import React, { useState, useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";
import { useNavigate } from "react-router-dom";
import axios from 'axios';

// Define the custom icon
const customIcon = L.icon({
  iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png', // Replace with the path to your custom icon
  iconSize: [32, 32], // Adjust the size as needed
  iconAnchor: [16, 32], // Anchor the icon at its center
  popupAnchor: [0, -32] // Adjust the popup anchor
});

const Map = () => {
  const [locations, setLocations] = useState([]);
  const [currentMarker, setCurrentMarker] = useState(null);
  const [markerInfo, setMarkerInfo] = useState({});
  const [showBooking, setShowBooking] = useState(false);
  const mapRef = useRef(null);
  const navigate = useNavigate();

  function handlenavigate() {
    navigate('/booking', { state: { city: markerInfo.city } });
  }

  useEffect(() => {
    axios.get('http://localhost:3001/get')
      .then(res => {
        setLocations(res.data); // Set the fetched locations to state
        markAllLocations(res.data); // Mark all locations on the map
      })
      .catch(err => console.log(err));
  }, []);

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    leafletMap.on('click', addMarker);

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, []);

  const markAllLocations = async (locations) => {
    for (const location of locations) {
      await markLocation(location);
    }
  };

  const markLocation = async (location) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
      const data = await response.json();
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const marker = L.marker([lat, lon], { icon: customIcon }) // Use the custom icon
          .addTo(mapRef.current)
          .bindPopup(`<b>${location.locations}</b>`)
          .on('click', () => handleMarkerClick(location))
          .openPopup();
        setCurrentMarker(marker);
      }
    } catch (error) {
      console.error('Error marking location:', error);
    }
  };

  const addMarker = (e) => {
    if (currentMarker !== null) {
      mapRef.current.removeLayer(currentMarker);
    }

    const popupContent = `
      <form id="marker-form">
        <label for="marker-name">Name:</label><br>
        <input type="text" id="marker-name" name="marker-name"><br>
        <label for="marker-desc">Description:</label><br>
        <input type="text" id="marker-desc" name="marker-desc"><br><br>
        <input type="submit" value="Add Marker">
      </form>
    `;

    const marker = L.marker(e.latlng, { icon: customIcon }) // Use the custom icon
      .addTo(mapRef.current)
      .bindPopup(popupContent)
      .openPopup();

    setCurrentMarker(marker);
  };

  useEffect(() => {
    const handleFormSubmit = (event) => {
      event.preventDefault();
      const name = document.getElementById('marker-name').value;
      const desc = document.getElementById('marker-desc').value;

      const newContent = `
        <h3>${name}</h3>
        <p>${desc}</p>
        <button id="bookBtn">Book</button>
      `;
      currentMarker.setPopupContent(newContent);

      const bookBtn = document.getElementById('bookBtn');
      if (bookBtn) {
        bookBtn.addEventListener('click', () => book(name, desc));
      }
    };

    const form = document.getElementById('marker-form');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    return () => {
      if (form) {
        form.removeEventListener('submit', handleFormSubmit);
      }
    };
  }, [currentMarker]);

  const handleMarkerClick = async (location) => {
    setMarkerInfo(location);
    setShowBooking(true);
  };

  const book = async (name, desc) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${currentMarker.getLatLng().lat}&lon=${currentMarker.getLatLng().lng}&format=json`);
      const data = await response.json();
      if (data && data.display_name) {
        setMarkerInfo({ ...markerInfo, name, desc, place: data.display_name });
      }
    } catch (error) {
      console.error('Error fetching place name:', error);
    }
    setShowBooking(true);
  };

  return (
    <div className="map-container">
      {showBooking && (
        <div className="h">
          <div className="info">
            <p className='parkbooks'>BOOK FOR PARK</p>
            <p className='infoplace'>Place: {markerInfo.place}</p>
            <p className='infoname'>Company: {markerInfo.company}</p>
            <p className='infodes'>City: {markerInfo.city}</p>
            <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
            <p className='infoprice'>${markerInfo.price}</p>
            <div className='rates'>
              RATE: 3.5 out of 5
            </div>
            <button className='infobtn' onClick={handlenavigate}>BOOK NOW</button>
            <div>
              <p className='infodes'>Description: {markerInfo.desc}</p>
              <p>How to Park</p>
              <p>Upon arrival, show parking pass to the attendant for validation</p>
            </div>
          </div>
        </div>
      )}
      <div id="map" className="map"></div>
    </div>
  );
};

export default Map;


//crt 

import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import "./index.css";
import { useEffect, useRef, useState } from 'react';

const Map = () => {
  const mapRef = useRef(null);
  const [currentMarker, setCurrentMarker] = useState(null);

  const customIcon = L.icon({
    iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png',
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32]
  });

  useEffect(() => {
    const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(leafletMap);
    mapRef.current = leafletMap;

    // Request user's location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;
        const userMarker = L.marker([latitude, longitude], { icon: customIcon })
          .addTo(mapRef.current)
          .bindPopup("You are here")
          .openPopup();
        mapRef.current.setView([latitude, longitude], 10);
        setCurrentMarker(userMarker);
      }, error => {
        console.error('Error getting user location:', error);
      });
    } else {
      console.error('Geolocation is not supported by this browser.');
    }

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
      }
    };
  }, []);

  return (
    <div className="map-container">
      <div id="map" className="map"></div>
    </div>
  );
};

export default Map;
//with search

import React, { useEffect, useRef, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";

const Map = () => {
    const [locations, setLocations] = useState([]);
    const [currentMarker, setCurrentMarker] = useState(null);
    const [markerInfo, setMarkerInfo] = useState({});
    const [showBooking, setShowBooking] = useState(false);
    const [search, setSearch] = useState("");
    const mapRef = useRef(null);
    const location = useLocation();
    const navigate = useNavigate();

    const { searchValue } = location.state || { searchValue: "" };

    const customIcon = L.icon({
        iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const handleNavigate = () => {
        navigate('/booking', { state: { city: markerInfo.city } });
    }

    useEffect(() => {
        axios.get('http://localhost:3001/get')
            .then(res => {
                setLocations(res.data); // Set the fetched locations to state
                markAllLocations(res.data); // Mark all locations on the map
            })
            .catch(err => console.log(err));
    }, []);

    useEffect(() => {
        const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(leafletMap);
        mapRef.current = leafletMap;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                const { latitude, longitude } = position.coords;
                const userMarker = L.marker([latitude, longitude], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup("You are here")
                    .openPopup();
                mapRef.current.setView([latitude, longitude], 10);
                setCurrentMarker(userMarker);
            }, error => {
                console.error('Error getting user location:', error);
            });
        } else {
            console.error('Geolocation is not supported by this browser.');
        }

        return () => {
            if (mapRef.current) {
                mapRef.current.remove();
            }
        };
    }, []);

    useEffect(() => {
        if (searchValue) {
            setSearch(searchValue);
            handleSearch(searchValue);
        }
    }, [searchValue]);

    const markAllLocations = async (locations) => {
        for (const location of locations) {
            await markLocation(location);
        }
    };

    const markLocation = async (location) => {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
            const data = await response.json();
            if (data && data.length > 0) {
                const { lat, lon } = data[0];
                const marker = L.marker([lat, lon], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup(`<b>${location.locations}</b>`)
                    .on('click', () => handleMarkerClick(location))
                    .openPopup();
                setCurrentMarker(marker);
            }
        } catch (error) {
            console.error('Error marking location:', error);
        }
    };

    const handleSearch = async (search) => {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(search)}&format=json`);
            const data = await response.json();
            if (data && data.length > 0) {
                const { lat, lon } = data[0];
                const marker = L.marker([lat, lon], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup(search)
                    .openPopup();
                mapRef.current.setView([lat, lon], 10);
                setCurrentMarker(marker);
            }
        } catch (error) {
            console.error('Error searching location:', error);
        }
    };

    const handleFormSubmit = (event) => {
        event.preventDefault();
        handleSearch(search);
    };

    const handleMarkerClick = async (location) => {
        setMarkerInfo(location);
        setShowBooking(true);
    };

    return (
        <div className="map-container">
            <div className="search-container">
                <form id="search-form" onSubmit={handleFormSubmit}>
                    <input 
                        type="text" 
                        value={search} 
                        onChange={(e) => setSearch(e.target.value)} 
                        placeholder="Search for a location" 
                    />
                    <button style={{width:"100px"}} type="submit">Search</button>
                </form>
            </div>
            {showBooking && (
                <div className="h">
                    <div className="info">
                        <p className='parkbooks'>BOOK FOR PARK</p>
                        <p className='infoplace'>Place: {markerInfo.place}</p>
                        <p className='infoname'>Company: {markerInfo.company}</p>
                        <p className='infodes'>City: {markerInfo.city}</p>
                        <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
                        <p className='infoprice'>${markerInfo.price}</p>
                        <div className='rates'>
                            RATE: 3.5 out of 5
                        </div>
                        <button className='infobtn' onClick={handleNavigate}>BOOK NOW</button>
                        <div>
                            <p className='infodes'>Description: {markerInfo.desc}</p>
                            <p>How to Park</p>
                            <p>Upon arrival, show parking pass to the attendant for validation</p>
                        </div>
                    </div>
                </div>
            )}
            <div id="map" className="map"></div>
        </div>
    );
};

export default Map;

//
import React, { useEffect, useRef, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder.css';
import 'leaflet-control-geocoder/dist/Control.Geocoder';
import "./index.css";

const Map = () => {
    const [locations, setLocations] = useState([]);
    const [currentMarker, setCurrentMarker] = useState(null);
    const [markerInfo, setMarkerInfo] = useState({});
    const [showBooking, setShowBooking] = useState(false);
    const [search, setSearch] = useState("");
    const mapRef = useRef(null);
    const location = useLocation();
    const navigate = useNavigate();

    const { searchValue } = location.state || { searchValue: "" };

    const customIcon = L.icon({
        iconUrl: 'https://www.iconpacks.net/icons/2/free-location-map-icon-2956-thumb.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const handleNavigate = () => {
        navigate('/booking', { state: { city: markerInfo.city } });
    }

    useEffect(() => {
        axios.get('http://localhost:3001/get')
            .then(res => {
                setLocations(res.data); // Set the fetched locations to state
                markAllLocations(res.data); // Mark all locations on the map
            })
            .catch(err => console.log(err));
    }, []);

    useEffect(() => {
        const leafletMap = L.map('map').setView([20.5937, 78.9629], 5);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(leafletMap);
        mapRef.current = leafletMap;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                const { latitude, longitude } = position.coords;
                const userMarker = L.marker([latitude, longitude], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup("You are here")
                    .openPopup();
                mapRef.current.setView([latitude, longitude], 10);
                setCurrentMarker(userMarker);
            }, error => {
                console.error('Error getting user location:', error);
            });
        } else {
            console.error('Geolocation is not supported by this browser.');
        }

        return () => {
            if (mapRef.current) {
                mapRef.current.remove();
            }
        };
    }, []);

    useEffect(() => {
        if (searchValue) {
            setSearch(searchValue);
            handleSearch(searchValue);
        }
    }, [searchValue]);

    const markAllLocations = async (locations) => {
        for (const location of locations) {
            await markLocation(location);
        }
    };

    const markLocation = async (location) => {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location.locations)}&format=json`);
            const data = await response.json();
            if (data && data.length > 0) {
                const { lat, lon } = data[0];
                L.marker([lat, lon], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup(`<b>${location.locations}</b>`)
                    .on('click', () => handleMarkerClick(location));
            }
        } catch (error) {
            console.error('Error marking location:', error);
        }
    };

    const handleSearch = async (search) => {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(search)}&format=json`);
            const data = await response.json();
            if (data && data.length > 0) {
                const { lat, lon } = data[0];
                const marker = L.marker([lat, lon], { icon: customIcon })
                    .addTo(mapRef.current)
                    .bindPopup(search)
                    .openPopup();
                mapRef.current.setView([lat, lon], 15); // Set zoom level to focus on the searched location
                setCurrentMarker(marker);
            }
        } catch (error) {
            console.error('Error searching location:', error);
        }
    };

    const handleFormSubmit = (event) => {
        event.preventDefault();
        handleSearch(search);
    };

    const handleMarkerClick = (location) => {
        setMarkerInfo(location);
        setShowBooking(true);
    };

    return (
        <div className="map-container">
            <div className="search-container">
                <form id="search-form" onSubmit={handleFormSubmit}>
                    <input 
                        type="text" 
                        value={search} 
                        onChange={(e) => setSearch(e.target.value)} 
                        placeholder="Search for a location" 
                    />
                    <button style={{width:"100px"}} type="submit">Search</button>
                </form>
            </div>
            {showBooking && (
                <div className="h">
                    <div className="info">
                        <p className='parkbooks'>BOOK FOR PARK</p>
                        <p className='infoplace'>Place: {markerInfo.place}</p>
                        <p className='infoname'>Company: {markerInfo.company}</p>
                        <p className='infodes'>City: {markerInfo.city}</p>
                        <h4 className='infoname'>Seats Available: {markerInfo.seat}</h4>
                        <p className='infoprice'>${markerInfo.price}</p>
                        <div className='rates'>
                            RATE: 3.5 out of 5
                        </div>
                        <button className='infobtn' onClick={handleNavigate}>BOOK NOW</button>
                        <div>
                            <p className='infodes'>Description: {markerInfo.desc}</p>
                            <p>How to Park</p>
                            <p>Upon arrival, show parking pass to the attendant for validation</p>
                        </div>
                    </div>
                </div>
            )}
            <div id="map" className="map"></div>
        </div>
    );
};

export default Map;
